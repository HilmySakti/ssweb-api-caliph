const moment = require('moment-timezone');

const randomArr = (arr = []) => {
    return arr[Math.floor(Math.random() * arr.length)];
}


module.exports = helpandUsage = (req, options) => {
    const source_code = 'https://github.com/caliphdev/ssweb-api'
    const link_github = "https://github.com/cakrayp/ssweb-api-caliph";

    const moment_tz = moment("2022-03-26").tz('Asia/Jakarta');
    const createdAt = moment_tz.fromNow();
    const now_years = moment_tz.year();
    const write_powered_years = now_years === 2022 ? now_years : `2022 - ${now_years}`;
    const exam_url = encodeURIComponent('https://www.example.com');
    const random_mediatype = randomArr(['desktop', 'handphone']);
    const welcometo_API = `
=======================================================================
---------------------------------------|
----> Welcome To Web Screenshot APIs   |-------------> Welcome
---------------------------------------|
=======================================================================

Hello welcome to Web Screenshot API...\nSo this is my step to make new programs for web screenshot.\n
-> Protocol: "${req.protocol}"
-> Your Domain: "${req.hostname}"
-> Path: "${req.path}"
=======================================================================

I was created server for web screenshot from source code.
- Source code    : "Caliphdev"
- Credits        : "Cakra YP"

Program information:
- Running on     : "heroku (heroku.com)"
- Framework      : "Container"
- Deploy With    : "Dockerfile"
- Puppeteer      : "google-chrome-stuble"
- ProgramType    : "Nodejs (${process.version})"
- Language       : "Javascript"
- Created-At     : "26 March 2022 (${createdAt})"

=======================================================================

Please visit our github for read documentation:

- Original       : "${source_code}" (caliphdev)
- Documentation  : "${link_github}" (cakrayp)

=======================================================================
`.trim()

    const usage_API = `
=======================================================================
------------------------------------|
------> Usage for My Rest API:      |---------------> UsageApi
------------------------------------|
=======================================================================

~ URL Details :
"${req.protocol}://${req.hostname}/api/webscreen?url={ENTER_URL}&mediatype={TYPE_MEDIA}&filetype={FILE_FORMAT}&fullpage={BOOLEAN}&responsetype={RESPONSE_FORMAT}"

=======================================================================

- Input URL:

URL is require for screenshot, but it does not support for a text, and number. except link or URL
We provide special detect enter the url.
"url={ENTER_URL}"

~ Examples:
URL (Default)            :   ${req.protocol}://${req.hostname}/api/webscreen?url=${decodeURIComponent(exam_url)}&mediatype=desktop&responsetype=json
URL (EncodeURI)          :   ${req.protocol}://${req.hostname}/api/webscreen?url=${encodeURI(exam_url)}&mediatype=desktop&responsetype=json
URL (EncodeURICompenent) :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=desktop&responsetype=json

=======================================================================

- MediaType (screen size):

Media screen size is avaiable for "desktop" and "handphone".
Web screenshot from links.
"mediatype={TYPE_MEDIA}"

~ Examples:
Desktop        :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=desktop&responsetype=json
Handphone      :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=handphone&responsetype=json

=======================================================================

- Filetype (file format):

file format is available for file type of "jpeg" or "jpg", "png", and "webp" to save.
"filetype={FILE_FORMAT}"

~ Examples:
jpeg        :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&filetype=jpeg&responsetype=json
png         :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&filetype=png&responsetype=json
WebP        :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&filetype=WebP&responsetype=json

=======================================================================

- Response Type:

We have provided several response services to share with all applications with certain
programming languages.
"responsetype={RESPONSE_FORMAT}"

~ Examples:
Json        :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&responsetype=json
Xml         :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&responsetype=xml
Image(s)    :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&responsetype=${randomArr(['image', 'images'])}

=======================================================================

- fullpage (full scroll):

We have provided a scrolling service for everything on the page
if you want to scroll active, you can add a paramenter of like this fullpage=true
"fullpage={BOOLEAN}"

~ Examples:
True (scroll active)    :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&fullpage=true&responsetype=image
False (default)         :   ${req.protocol}://${req.hostname}/api/webscreen?url=${exam_url}&mediatype=${random_mediatype}&fullpage=false&responsetype=image
\n
`

const powered_by = `
=======================================================================
------------> Powered ${write_powered_years} by "Cakra YP" <------------
=======================================================================
`.trim()

    return `${welcometo_API}\n\n${usage_API}${powered_by}`
}